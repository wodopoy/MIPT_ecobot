import os, re
import telebot
import dbworker
import yandexmap
import auxiliaryfunc as af
from telebot import types
from dotenv import load_dotenv

config = load_dotenv()
bot = telebot.TeleBot(os.getenv("tgapikey"))

user_dict = dict()
day_dict = dict()

#–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ç–µ–ª–µ–±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥. –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä message –∫–æ—Ç–æ—Ä—ã–π –ø–æ–π–¥–µ—Ç –≤ –∞—Ä–≥ —Ñ—É–Ω–∫—Ü–∏–∏
@bot.message_handler(commands=['start', 'menu'])
def menu(message):
    try:
        if message.text == '/start':
            user_dict[message.chat.id] = []
            print(user_dict)
            day_dict[message.chat.id] = {'Monday': True, 'Tuesday': True, 'Wednesday': True,
            'Thursday': True, 'Friday': True, 'Saturday': True, 'Sunday': True}
            print(day_dict)
            user_dict[message.chat.id].append('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
            user_dict[message.chat.id].append('–í—Ç–æ—Ä–Ω–∏–∫')
            user_dict[message.chat.id].append('–°—Ä–µ–¥–∞')
            user_dict[message.chat.id].append('–ß–µ—Ç–≤–µ—Ä–≥')
            user_dict[message.chat.id].append('–ü—è—Ç–Ω–∏—Ü–∞')
            user_dict[message.chat.id].append('–°—É–±–±–æ—Ç–∞')
            user_dict[message.chat.id].append('–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')

        obj = dbworker.init_user(chat_id = message.chat.id)
        print(obj)

        #—Å–æ–∑–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ç–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ - –¥–æ–±–∞–≤–∏—Ç—å call-back
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        itembtn1 = types.KeyboardButton('/add_convenient_day')
        itembtn2 = types.KeyboardButton('/set_address')
        itembtn3 = types.KeyboardButton('/enter_trash_weight')
        itembtn4 = types.KeyboardButton('/profile')
        markup.add(itembtn1,itembtn2,itembtn3,itembtn4)

        bot.reply_to(message, "start", reply_markup = markup, parse_mode='MARKDOWN')

    except Exception as e:
        bot.reply_to(message, f'smth go wrong: {e}')
        

@bot.message_handler(commands=['set_address'])
def set_address(message):
    try:
        markup = types.ReplyKeyboardRemove(selective=False)

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å", reply_markup=markup, parse_mode='MARKDOWN')
        bot.register_next_step_handler(msg, set_coordinates)

    except Exception as e:
        bot.reply_to(message, f'smth go wrong: {e}')

def set_coordinates(message):
    pos = yandexmap.geo_decoder(address = message.text)
    
    if pos == 'error':

        msg = bot.send_message(message.chat.id, "–£–ø—Å:( –ú—ã –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...", parse_mode='MARKDOWN')
        bot.register_next_step_handler(msg, set_coordinates)

    else: 
        obj = dbworker.set_position(chat_id = message.chat.id, address = message.text, x = pos['x'], y = pos['y'])

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        itembtn1 = types.KeyboardButton('/add_convenient_day')
        itembtn2 = types.KeyboardButton('/set_address')
        itembtn3 = types.KeyboardButton('/enter_trash_weight')
        itembtn4 = types.KeyboardButton('/profile')
        markup.add(itembtn1,itembtn2,itembtn3,itembtn4)
        
        bot.send_message(message.chat.id, f"–£—Ä–∞, –≤—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å—Å {obj.address}\n\n–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {obj.x} {obj.y}", reply_markup=markup, parse_mode='MARKDOWN')

@bot.message_handler(commands=['enter_trash_weight'])
def enter_trash_weight(message):
    try:
        markup = types.ReplyKeyboardRemove(selective=False)

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –º—É—Å–æ—Ä–∞ [–≤ (–∫–≥)]", reply_markup=markup, parse_mode='MARKDOWN')
        bot.register_next_step_handler(msg, set_trash_weight)

    except Exception as e:
        bot.reply_to(message, f'smth go wrong: {e}')

def set_trash_weight(message):
    trash_weight = message.text.replace(',', '.')
    obj = dbworker.set_trash_weight(chat_id = message.chat.id, trash_weight = float(trash_weight))

    if obj == 'error':
        msg = bot.send_message(message.chat.id, "–£–ø—Å;( –í—ã —É–∫–∞–∑–∞–ª–∏ –≤–µ—Å –º—É—Å–æ—Ä–∞ 0–∫–≥ –∏–ª–∏ –¥–∞–∂–µ –º–µ–Ω—å—à–µ!!! –í—ã –æ—á–µ–Ω—å —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã;)\n\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –º—É—Å–æ—Ä–∞ –µ—â–µ —Ä–∞–∑!", parse_mode='MARKDOWN')
        bot.register_next_step_handler(msg, set_trash_weight)

    else: 
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        itembtn1 = types.KeyboardButton('/add_convenient_day')
        itembtn2 = types.KeyboardButton('/set_address')
        itembtn3 = types.KeyboardButton('/enter_trash_weight')
        itembtn4 = types.KeyboardButton('/profile')
        markup.add(itembtn1,itembtn2,itembtn3,itembtn4)

        bot.send_message(message.chat.id, f"–í—ã —É–∫–∞–∑–∞–ª–∏ {obj.trash_weight} –∫–≥ –º—É—Å–æ—Ä–∞!", reply_markup=markup, parse_mode='MARKDOWN')

@bot.message_handler(commands=['admin'])
def admin(message):
    try:
        markup = types.ReplyKeyboardRemove(selective=False)

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", reply_markup=markup, parse_mode='MARKDOWN')
        bot.register_next_step_handler(msg, admin_panel)

    except Exception as e:
        bot.reply_to(message, f'smth go wrong: {e}')

@bot.message_handler(commands=['profile'])
def profile(message):
    try:

        address = dbworker.get_user_address(chat_id = message.chat.id)
        if address == 'none':
            address = '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å'
        trash_weight = dbworker.get_trash_weight(chat_id = message.chat.id)
        if trash_weight == 'none':
            trash_weight = '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–µ—Å –º—É—Å–æ—Ä–∞'

        if len(user_dict[message.chat.id]) == 0:
            days = '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É–¥–æ–±–Ω—ã–µ –¥–Ω–∏'
            
        else:
            days = ''
            for i in range(len(user_dict[message.chat.id])):
                days += user_dict[message.chat.id][i]+', '

        msg = f'*–ü—Ä–æ—Ñ–∏–ª—å*\n\n–ê–¥—Ä–µ—Å: {address}\n–í–µ—Å –º—É—Å–æ—Ä–∞: {trash_weight}\n–£–¥–æ–±–Ω—ã–µ –¥–Ω–∏: {days}'

        bot.send_message(message.chat.id, msg, parse_mode='MARKDOWN')
        

    except Exception as e:
        bot.reply_to(message, f'smth go wrong: {e}')

#—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
def admin_panel(message):
    try:
        
        if message.text == '1234':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            itembtn1 = types.KeyboardButton('/send_best_position')
            markup.add(itembtn1)

            bot.send_message(message.chat.id, "—É –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∞ —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –∞–Ω–µ–∫–¥–æ—Ç—ã!", reply_markup=markup, parse_mode='MARKDOWN')

        else:
            msg = bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", parse_mode='MARKDOWN')
            
    except Exception as e:
        bot.reply_to(message, f'smth go wrong: {e}')

@bot.message_handler(commands=['send_best_position'])
def send_best_position(message):
    try:
        print(user_dict)
        best_day = af.best_day(user_dict)
        print(best_day)
        chat_ids = af.chatids_with_best_day_match(user_dict = user_dict, best_day = best_day)
        print(chat_ids)
        x, y = af.determine_the_best_position(applied_chatids = chat_ids)

        if x == 'no x': 
            bot.reply_to(message, f'–ù–∏–∫—Ç–æ –Ω–µ —É–∫–∞–∑–∞–ª –≤–µ—Å –º—É—Å–æ—Ä–∞ –∏–ª–∏ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å')
        else:
                best_address = yandexmap.get_address_by_coordinates(x = x, y = y)
                nearest_address = af.nearest_address(applied_chatids = chat_ids, x = x, y = y)

                all_users_chatids = dbworker.get_users_chatids()

                msg=f'–ù–∞—à —Å—É–ø–µ—Ä –ø—É–ø–µ—Ä –±–æ—Ç –≤—Å–µ –ø–æ—Å—á–∏—Ç–∞–ª –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏!\n\n–î–µ–Ω—å:{best_day}\n–õ—É—á—à–∏–π –∞–¥—Ä–µ—Å(–ø–æ –Ω–∞—à–µ–º—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–º—É –º–Ω–µ–Ω–∏—é): {best_address} ({x}, {y})\n–ë–ª–∏–∂–∞–π—à–∏–π –∞–¥—Ä–µ—Å –∫ –ª—É—á—à–µ–π —Ç–æ—á–∫–µ –∏–∑ –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {nearest_address}'

                for i in range(len(all_users_chatids)):
                    bot.send_message(all_users_chatids[i], msg, parse_mode='MARKDOWN')
                    bot.send_message(all_users_chatids[i], '–õ—É—á—à–∏–π –∞–¥—Ä–µ—Å', parse_mode='MARKDOWN')
                    bot.send_location(all_users_chatids[i], x, y)


    except Exception as e:
        bot.reply_to(message, f'smth go wrong: {e}')
        print(e)

@bot.message_handler(commands=['cleardb'])
def cleardb(message):
    output = dbworker.clearDB()
    bot.send_message(message.chat.id, output, parse_mode='MARKDOWN')

@bot.message_handler(commands=['add_convenient_day'])
def add_convenient_day(message):
    try:
        markup_inline = types.InlineKeyboardMarkup(row_width=1)

        monday = types.InlineKeyboardButton(text = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data = 'Monday')
        tuesday = types.InlineKeyboardButton(text = '–í—Ç–æ—Ä–Ω–∏–∫', callback_data = 'Tuesday')
        wednesday = types.InlineKeyboardButton(text = '–°—Ä–µ–¥–∞', callback_data = 'Wednesday')
        thursday = types.InlineKeyboardButton(text = '–ß–µ—Ç–≤–µ—Ä–≥', callback_data = 'Thursday')
        friday = types.InlineKeyboardButton(text = '–ü—è—Ç–Ω–∏—Ü–∞', callback_data = 'Friday')
        saturday = types.InlineKeyboardButton(text = '–°—É–±–±–æ—Ç–∞', callback_data = 'Saturday')
        sunday = types.InlineKeyboardButton(text = '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', callback_data = 'Sunday')
        update = types.InlineKeyboardButton(text = '–û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data = 'update')
        
        markup_inline.add(monday, tuesday, wednesday, thursday, friday, saturday, sunday,update)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –¥–Ω–∏!", reply_markup=markup_inline, parse_mode='MARKDOWN')

    except Exception as e:
         bot.reply_to(message, f'smth go wrong: {e}')

@bot.callback_query_handler(func = lambda call:True)
def callback_handler(call):
    markup_inline = types.InlineKeyboardMarkup(row_width=1)

    monday = types.InlineKeyboardButton(text = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data = 'Monday')
    tuesday = types.InlineKeyboardButton(text = '–í—Ç–æ—Ä–Ω–∏–∫', callback_data = 'Tuesday')
    wednesday = types.InlineKeyboardButton(text = '–°—Ä–µ–¥–∞', callback_data = 'Wednesday')
    thursday = types.InlineKeyboardButton(text = '–ß–µ—Ç–≤–µ—Ä–≥', callback_data = 'Thursday')
    friday = types.InlineKeyboardButton(text = '–ü—è—Ç–Ω–∏—Ü–∞', callback_data = 'Friday')
    saturday = types.InlineKeyboardButton(text = '–°—É–±–±–æ—Ç–∞', callback_data = 'Saturday')
    sunday = types.InlineKeyboardButton(text = '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', callback_data = 'Sunday')
    update = types.InlineKeyboardButton(text = '–û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data = 'update')
    
    markup_inline.add(monday, tuesday, wednesday, thursday, friday, saturday, sunday,update)

    if call.data == 'update':
        if len(user_dict[call.from_user.id]) == 0:
            msg = '–î–Ω–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å –º—É—Å–æ—Ä, –ª–∏—à–Ω–∏–µ —É–±–µ—Ä–∏—Ç–µ:'
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg)
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup_inline)
            bot.answer_callback_query(call.id, text="updated!")
        else:
            msg = '–î–Ω–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å –º—É—Å–æ—Ä, –ª–∏—à–Ω–∏–µ —É–±–µ—Ä–∏—Ç–µ:\n\n'
            for i in range(len(user_dict[call.from_user.id])):
                msg += user_dict[call.from_user.id][i]+' ‚úÖ\n'

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg)
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup_inline)
            bot.answer_callback_query(call.id, text="updated!")

    if call.data == 'Monday':

        day_dict[call.from_user.id]['Monday'] = not day_dict[call.from_user.id]['Monday']

        if day_dict[call.from_user.id]['Monday'] == True:
            user_dict[call.from_user.id].append('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
            bot.answer_callback_query(call.id, text="–í—ã –¥–æ–±–∞–≤–∏–ª–∏: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
        
        if day_dict[call.from_user.id]['Monday'] == False:
            user_dict[call.from_user.id].remove('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
            bot.answer_callback_query(call.id, text="–í—ã —É–±—Ä–∞–ª–∏: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫") 
    
    if call.data == 'Tuesday':

        day_dict[call.from_user.id]['Tuesday'] = not day_dict[call.from_user.id]['Tuesday']

        if day_dict[call.from_user.id]['Tuesday'] == True:
            user_dict[call.from_user.id].append('–í—Ç–æ—Ä–Ω–∏–∫')
            bot.answer_callback_query(call.id, text="–í—ã –¥–æ–±–∞–≤–∏–ª–∏: –í—Ç–æ—Ä–Ω–∏–∫")
        
        if day_dict[call.from_user.id]['Tuesday'] == False:
            user_dict[call.from_user.id].remove('–í—Ç–æ—Ä–Ω–∏–∫')
            bot.answer_callback_query(call.id, text="–í—ã —É–±—Ä–∞–ª–∏: –í—Ç–æ—Ä–Ω–∏–∫") 

    if call.data == 'Wednesday':

        day_dict[call.from_user.id]['Wednesday'] = not day_dict[call.from_user.id]['Wednesday']

        if day_dict[call.from_user.id]['Wednesday'] == True:
            user_dict[call.from_user.id].append('–°—Ä–µ–¥–∞')
            bot.answer_callback_query(call.id, text="–í—ã –¥–æ–±–∞–≤–∏–ª–∏: –°—Ä–µ–¥–∞")
        
        if day_dict[call.from_user.id]['Wednesday'] == False:
            user_dict[call.from_user.id].remove('–°—Ä–µ–¥–∞')
            bot.answer_callback_query(call.id, text="–í—ã —É–±—Ä–∞–ª–∏: –°—Ä–µ–¥–∞") 

    if call.data == 'Thursday':

        day_dict[call.from_user.id]['Thursday'] = not day_dict[call.from_user.id]['Thursday']

        if day_dict[call.from_user.id]['Thursday'] == True:
            user_dict[call.from_user.id].append('–ß–µ—Ç–≤–µ—Ä–≥')
            bot.answer_callback_query(call.id, text="–í—ã –¥–æ–±–∞–≤–∏–ª–∏: –ß–µ—Ç–≤–µ—Ä–≥")
        
        if day_dict[call.from_user.id]['Thursday'] == False:
            user_dict[call.from_user.id].remove('–ß–µ—Ç–≤–µ—Ä–≥')
            bot.answer_callback_query(call.id, text="–í—ã —É–±—Ä–∞–ª–∏: –ß–µ—Ç–≤–µ—Ä–≥") 

    if call.data == 'Friday':

        day_dict[call.from_user.id]['Friday'] = not day_dict[call.from_user.id]['Friday']

        if day_dict[call.from_user.id]['Friday'] == True:
            user_dict[call.from_user.id].append('–ü—è—Ç–Ω–∏—Ü–∞')
            bot.answer_callback_query(call.id, text="–í—ã –¥–æ–±–∞–≤–∏–ª–∏: –ü—è—Ç–Ω–∏—Ü–∞")
        
        if day_dict[call.from_user.id]['Friday'] == False:
            user_dict[call.from_user.id].remove('–ü—è—Ç–Ω–∏—Ü–∞')
            bot.answer_callback_query(call.id, text="–í—ã —É–±—Ä–∞–ª–∏: –ü—è—Ç–Ω–∏—Ü–∞") 

    if call.data == 'Saturday':

        day_dict[call.from_user.id]['Saturday'] = not day_dict[call.from_user.id]['Saturday']

        if day_dict[call.from_user.id]['Saturday'] == True:
            user_dict[call.from_user.id].append('–°—É–±–±–æ—Ç–∞')
            bot.answer_callback_query(call.id, text="–í—ã –¥–æ–±–∞–≤–∏–ª–∏: –°—É–±–±–æ—Ç–∞")
        
        if day_dict[call.from_user.id]['Saturday'] == False:
            user_dict[call.from_user.id].remove('–°—É–±–±–æ—Ç–∞')
            bot.answer_callback_query(call.id, text="–í—ã —É–±—Ä–∞–ª–∏: –°—É–±–±–æ—Ç–∞") 

    if call.data == 'Sunday':

        day_dict[call.from_user.id]['Sunday'] = not day_dict[call.from_user.id]['Sunday']

        if day_dict[call.from_user.id]['Sunday'] == True:
            user_dict[call.from_user.id].append('–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
            bot.answer_callback_query(call.id, text="–í—ã –¥–æ–±–∞–≤–∏–ª–∏: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
        
        if day_dict[call.from_user.id]['Sunday'] == False:
            user_dict[call.from_user.id].remove('–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
            bot.answer_callback_query(call.id, text="–í—ã —É–±—Ä–∞–ª–∏: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
    
if __name__ == "__main__":
    bot.polling(none_stop=True)
